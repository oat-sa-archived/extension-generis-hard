{"version":3,"file":"routes.js","sources":["../../grid/tao.grid.js","routes.js","../Switcher.js","settings/optimizer.js"],"names":[],"mappings":"AAoBA,QAAA,cAAA,SAAA,MAAA,QAAA,SAEA,KAAA,SAAA,SACA,KAAA,OAAA,KACA,KAAA,MAAA,MACA,KAAA,KAAA,GAAA,OACA,KAAA,QAAA,QACA,KAAA,YAAA,GAAA,OACA,KAAA,cAAA,GAAA,OACA,KAAA,SAAA,GAAA,OACA,KAAA,QAAA,EAAA,UAAA,aAAA,eAAA,SAGA,MAAA,KAAA,QAAA,SACA,KAAA,QAAA,OAAA,EAAA,KAAA,UAAA,SAAA,UAEA,MAAA,KAAA,QAAA,QACA,KAAA,QAAA,MAAA,EAAA,KAAA,UAAA,SAAA,SAGA,KAAA,YACA,KAAA,WCzCA,OAAA,mCAAA,WACA,OACA,UACA,SACA,MAAA,qCD2CA,aAAA,YAAA,cAKA,aAAA,UAAA,UAAA,WAEA,GAAA,eAAA,EACA,UAAA,KAAA,QAAA,KAGA;IAAA,GAAA,MAAA,MAAA,MAAA,CACA,GAAA,QAAA,mBAAA,MAAA,MAAA,IAAA,OAAA,KAAA,MAAA,IAAA,OAAA,CACA,gBAAA,OAIA,GAAA,GAAA,CACA,KAAA,GAAA,MAAA,MAAA,MAAA,CAGA,GAAA,UAAA,mBAAA,MAAA,MAAA,IAAA,SAAA,KAAA,MAAA,IAAA,SAAA,CAkBA,IAhBA,UAAA,IACA,KAAA,cAAA,OAAA,SAAA,EAAA,MACA,KAAA,YAAA,OAAA,SAAA,EAAA,OAIA,KAAA,cAAA,UAAA,KAAA,MAAA,IAAA,MAGA,KAAA,YAAA,WACA,KAAA,KAAA,MAAA,IAAA,GACA,MAAA,KAAA,MAAA,IAAA,GACA,MAAA,mBAAA,MAAA,MAAA,IAAA,MAAA,KAAA,MAAA,IAAA,MAAA,QAIA,mBAAA,MAAA,MAAA,IAAA,QAAA,SAAA,KAAA,MAAA,IAAA,OAAA,CAEA,GAAA,SAAA,KAAA,WAAA,KAAA,MAAA,IAAA,OAEA;KAAA,SAAA,KAAA,MAAA,IAAA,IAAA,QAEA,KAAA,YAAA,UAAA,UAAA,QAAA,UAIA,GAAA,aAAA,KAAA,MAAA,IAAA,MAAA,CACA,GAAA,cAAA,OAAA,+BACA,MAAA,YAAA,UAAA,UAAA,aAAA,UAIA,GAAA,QAAA,mBAAA,MAAA,MAAA,IAAA,OAAA,KAAA,MAAA,IAAA,OAAA,EACA,MAAA,UAAA,OAAA,cAAA,CAEA,MAAA,YAAA,UAAA,MAAA,MAEA,MAOA,aAAA,UAAA,SAAA,WAUA,GAAA,MAAA,IACA,MAAA,OAAA,EAAA,KAAA,UAAA,QAEA,SAAA,QACA,MAAA,MACA,SAAA,KAAA,cACA,SAAA,KAAA,YACA,aAAA,EAIA,QAAA,KAAA,QAAA,MACA,YACA,aAAA,EACA,GAAA,KAEA,OAAA,KAAA,QAAA,OAAA,GAEA,WAAA,EACA,YAAA,SAAA,IACA,MAAA,KAAA,QAAA,SAAA,aACA,KAAA,QAAA,SAAA,YAAA;KAWA,aAAA,UAAA,WAAA,SAAA,QAEA,GAAA,aAAA,KAEA,iBAAA,UAAA,OAAA,UACA,aAAA,OAAA,iBACA,KAAA,aACA,KAAA,IAAA,OAAA,4BAAA,OAAA,0BAIA,OAFA,aAAA,cA2BA,aAAA,UAAA,MAAA,WAEA,GAAA,UAAA,EAAA,KAAA,UAAA,SAAA,SACA,SAAA,SAAA,SAAA,iBACA,UAAA,QAAA,OAAA,UACA,KAAA,KAAA,GAAA,QAQA,aAAA,UAAA,UAAA,SAAA,OAEA,OAAA,KAAA,UAAA,OAAA,aAAA,QAOA,aAAA,UAAA,QAAA,SAAA,MAEA,IAAA,GAAA,SAAA,MAAA,CACA,KAAA,KAAA,OAAA,KACA,KAAA,KAAA,OAAA,KAAA,MAEA;IAAA,GAAA,YAAA,MAAA,SACA,mBAAA,MAAA,SAAA,UAAA,eACA,KAAA,KAAA,OAAA,UAAA,KAAA,SAAA,UAAA,aAAA,KAAA,KAAA,KAAA,OAAA,MAAA,UAIA,QAAA,KAAA,UAAA,OAAA,aAAA,MAAA,KAAA,KAAA,OAEA,KAAA,GAAA,YAAA,MAAA,SACA,GAAA,mBAAA,MAAA,SAAA,UAAA,eAAA,CACA,GAAA,MAAA,KAAA,QAAA,MAAA,SACA,MAAA,SAAA,UAAA,eAAA,KAAA,KAAA,MAAA,aAUA,aAAA,UAAA,YAAA,SAAA,OAEA,GAAA,aAAA,GACA,EAAA,EAQA,OAPA,GAAA,KAAA,UAAA,KAAA,eAAA,WAAA,KAAA,WACA,MAAA,GAAA,MAAA,KAAA,OAAA,WACA,YAAA,OAGA;GAEA,aAOA,aAAA,UAAA,QAAA,SAAA,OAEA,GAAA,MAAA,KACA,YAAA,gGACA,SAAA,sGACA,SAAA,iDAEA,IAAA,KAAA,OAAA,OAGA,iBAAA,EAAA,aAAA,YAAA,EAAA,KAEA,KAAA,GAAA,YAAA,MAAA,SACA,GAAA,mBAAA,MAAA,SAAA,UAAA,cAAA,CACA,GAAA,MAAA,KAAA,QAAA,MAAA,SACA,MAAA,SAAA,UAAA,cAAA,KAAA,KAAA,MAAA,UAMA,iBAAA,KAAA,kBAAA,IAAA,QAAA,WACA,GAAA,WACA;IAAA,GAAA,YAAA,MAAA,SACA,GAAA,mBAAA,MAAA,SAAA,UAAA,eAAA,CACA,GAAA,MAAA,KAAA,QAAA,MAAA,SACA,SAAA,UAAA,KAAA,SAAA,UAAA,eAAA,KAAA,KAAA,MAAA,cAEA,SAAA,UAAA,KAAA,KAAA,MAGA,kBAAA,SACA,MAAA,KAAA,QAAA,SAAA,eACA,KAAA,QAAA,SAAA,cAAA,MAAA,WAKA,iBAAA,KAAA,oBAAA,IAAA,QAAA,WACA,GAAA,iBACA,eAAA,OAAA,KAAA,WAAA,OACA,KAAA,QAAA,eACA,iBAAA,YAOA,aAAA,UAAA,OAAA,WAEA,GAAA,MAAA,KACA,gBACA,KAAA,GAAA,UAEA,MAAA,aAAA,YACA,YAAA,gGACA,SAAA,sGACA,SAAA,iDAEA,IAAA,IAGA;OAAA,KAAA,UAAA,OAAA,aAAA,MAAA,gBACA,IAAA,KAAA,OAAA,MAEA,IAAA,kBAAA,EAAA,aAAA,YAAA,EAAA,KAEA,KAAA,GAAA,YAAA,MAAA,SACA,GAAA,mBAAA,MAAA,SAAA,UAAA,cAAA,CACA,GAAA,MAAA,KAAA,QAAA,MAAA,SACA,MAAA,SAAA,UAAA,cAAA,KAAA,KAAA,MAAA,UAMA,iBAAA,KAAA,kBAAA,MAAA,WACA,GAAA,WACA,KAAA,GAAA,YAAA,MAAA,SACA,GAAA,mBAAA,MAAA,SAAA,UAAA,eAAA,CACA,GAAA,MAAA,KAAA,QAAA,MAAA,SACA,SAAA,UAAA,KAAA,SAAA,UAAA,eAAA,KAAA,KAAA,MAAA,cAEA,SAAA,UAAA,KAAA,KAAA,MAGA;iBAAA,SACA,MAAA,KAAA,QAAA,SAAA,YACA,KAAA,QAAA,SAAA,WAAA,MAAA,WAKA,iBAAA,KAAA,oBAAA,MAAA,WACA,OAAA,KAAA,UAAA,OAAA,aAAA,OACA,iBAAA,YAQA,aAAA,UAAA,IAAA,SAAA,MAEA,GAAA,MAAA,KACA,QAAA,CAEA,KAAA,GAAA,KAAA,MACA,KAAA,KAAA,GAAA,KAAA,EAGA,KAAA,GAAA,SAAA,MAAA,CAEA,IAAA,GAAA,YAAA,MAAA,SACA,mBAAA,MAAA,SAAA,UAAA,eACA,KAAA,KAAA,OAAA,UAAA,KAAA,SAAA,UAAA,aAAA,KAAA,KAAA,KAAA,OAAA,MAAA,UAyBA,QAAA,KAAA,UAAA,OAAA,aAAA,MAAA,KAAA,KAAA,OAEA,KAAA,GAAA,YAAA,MAAA,SACA,GAAA,mBAAA,MAAA,SAAA,UAAA,eAAA,CACA,GAAA,MAAA,KAAA,QAAA,MAAA,SACA;KAAA,SAAA,UAAA,eAAA,KAAA,KAAA,MAAA,UAGA,SAGA,IAAA,KAAA,KAAA,OAAA,MACA,GAAA,KAAA,KAAA,QAAA,SAAA,WACA,GAAA,gBAAA,KAAA,kBAAA,KACA,MAAA,QAAA,eAAA,SAGA,MAAA,UAOA,aAAA,UAAA,OAAA,SAAA,OAEA,GAAA,aAAA,KACA,KAAA,EAAA,KAAA,UAAA,KAAA,UAAA,MAAA,KAIA,OAHA,MAAA,OAAA,IACA,YAAA,KAAA,IAAA,IAEA,aAQA,aAAA,UAAA,QAAA,SAAA,MAAA,UAEA,GAAA,aAAA,IAKA,OAJA,OAAA,EAAA,KAAA,UAAA,KAAA,UAAA,MAAA,MAAA,KAAA,wBAAA,KAAA,SAAA,MAAA,GAAA,IAAA,SAAA,MACA,MAAA,OAAA,IACA,YAAA,MAAA,IAAA,IAEA;EAOA,aAAA,UAAA,WAAA,SAAA,OAEA,MAAA,mBAAA,MAAA,KAAA,OACA,KAAA,KAAA,OADA,QAUA,aAAA,UAAA,YAAA,SAAA,MAAA,UAEA,GAAA,aAAA,KACA,QAAA,KAAA,WAAA,MAMA,OALA,UACA,mBAAA,SAAA,YACA,YAAA,QAAA,WAGA,aAQA,aAAA,UAAA,kBAAA,SAAA,MAEA,GAAA,cAAA,MAAA,KAAA,SAAA,MACA,UAAA,EAAA,MAAA,KAAA,mBACA,aACA,UAAA,UAAA,OAAA,KAAA,SAAA,QACA,YAAA,SAAA,UAEA,IAAA,MAAA,EAAA,MAAA,OAAA,MACA,OAAA,KAAA,KAAA,KAIA,OAHA,UACA,YAAA,MAAA,QAEA;EAMA,aAAA,gBACA,OAAA,KACA,MAAA,KACA,MAAA,OACA,UACA,YAAA,OAGA,OAAA,gBAAA,cE7fA,OAAA,wBAAA,SAAA,UAAA,QAAA,SAAA,EAAA,QAAA,IAIA,QAAA,UAAA,eAAA,aAEA,KAAA,SACA,QAAA,aACA,iBAAA,aACA,aAAA,aACA,eAAA,aACA,WAAA,aACA,oBAAA,cAGA,cACA,KAAA,QAAA,EAAA,OAAA,KAAA,QAAA,cAGA,KAAA,MAAA,EAAA,IAAA,gBACA,KAAA,WACA,KAAA,aAAA,GACA,KAAA,aAAA,EACA,KAAA,WAAA,EAEA,SAAA,UAAA,gBAAA,KA6PA,MA1PA,UAAA,aAEA,SAAA,UAAA,aAAA,SAAA,QACA,GAAA,KAAA,QAAA,QAGA;MAFA,MAAA,wBAAA,QAKA,SAAA,UAAA,KAAA,WAEA,GAAA,QAAA,KACA,UAAA,OAAA,aAAA,kBAoDA,OAlDA,GAAA,MACA,KAAA,OACA,IAAA,UACA,QACA,SAAA,OACA,QAAA,SAAA,GACA,GAAA,GAAA,EAAA,OAEA,MADA,QAAA,QAAA,cAAA,OAAA,QAAA,aAAA,SACA,CAGA,IAAA,cACA,SAAA,QACA,UAAA,EACA,UAAA,GAAA,WAAA,GAAA,UAAA,GAAA,cACA,WACA,KAAA,QAAA,MAAA,QAAA,UAAA,IACA,KAAA,SAAA,MAAA,SAAA,MAAA,SAAA,UAAA,IACA,KAAA,QAAA,MAAA,QAAA,MAAA,SAAA,UAAA,IAEA,OAAA,OACA,WAAA,EACA,MAAA,SAAA,OAAA,MAAA,SAAA,EACA,SAAA,SACA,UAAA,MACA,QAAA,GAAA,qBAKA;SAAA,UAAA,SAAA,iBAAA,WACA,OAAA,MAAA,OAAA,YAGA,IAAA,GAAA,CACA,KAAA,GAAA,OAAA,GAAA,CACA,GAAA,KAAA,EAAA,KACA,OAAA,IAAA,SACA,UAAA,IAAA,SACA,QAAA,GAAA,aAAA,IAAA,OAAA,aAAA,UACA,OAAA,IAAA,MACA,WAAA,IAAA,MACA,QAAA,WAAA,GAAA,QAAA,OAAA,OAAA,QAAA,MAAA,OAAA,SAAA,UAAA,UAAA,aACA,WAOA,GAGA,SAAA,UAAA,iBAAA,WACA,KAAA,WAAA,EACA,KAAA,aAAA,CAEA,KAAA,GAAA,GAAA,EAAA,EAAA,KAAA,QAAA,OAAA,IACA,KAAA,aAAA,GAAA,aAAA,KAAA,QAAA,GAAA,YACA,KAAA,aAAA,EAIA,MAAA,QAAA,SACA,KAAA,QAAA,QAAA,MAGA,KAAA,YAGA,SAAA,UAAA,mBAAA,WACA,KAAA,aAAA,EACA,KAAA,WAAA,EAEA,KAAA,QAAA,kBACA,KAAA,QAAA,iBAAA,KAGA;IAAA,GAAA,GAAA,EAAA,EAAA,KAAA,QAAA,OAAA,IACA,KAAA,aAAA,GAAA,eAAA,KAAA,QAAA,GAAA,YACA,KAAA,aAAA,EAIA,MAAA,YAGA,SAAA,UAAA,WAAA,SAAA,MAAA,MAEA,mBAAA,MAAA,QAAA,OACA,KAAA,MAAA,OAAA,aAAA,MAAA,MAGA,KAAA,MAAA,OAAA,aAAA,MAAA,MAGA,KAAA,QAAA,OAAA,MAGA,SAAA,UAAA,YAAA,SAAA,MAAA,QAAA,MACA,KAAA,MAAA,OAAA,UAAA,MAAA,QAAA,MACA,KAAA,QAAA,OAAA,SAAA,MAGA,SAAA,UAAA,cAAA,SAAA,MAAA,MACA,KAAA,QAAA,OAAA,mBAAA,KACA,KAAA,QAAA,OAAA,mBAAA,MAGA,SAAA,UAAA,cAAA,SAAA,UACA,GAAA,aAAA,EAEA;IAAA,GAAA,SAAA,MAAA,QAEA,GAAA,KAAA,QAAA,OAAA,WAAA,SAAA,CACA,YAAA,KACA,OAIA,MAAA,cAGA,SAAA,UAAA,SAAA,WACA,KAAA,aAAA,KAAA,QAAA,OACA,KAAA,aAAA,GAAA,eAAA,KAAA,QAAA,KAAA,cAAA,UACA,KAAA,eAAA,KAAA,QAAA,KAAA,cAAA,UAEA,KAAA,aAAA,GAAA,aAAA,KAAA,QAAA,KAAA,cAAA,WACA,KAAA,aAAA,KAAA,QAAA,KAAA,cAAA,UAIA,KAAA,OAIA,SAAA,UAAA,aAAA,SAAA,UACA,GAAA,QAAA,KACA,MAAA,KAAA,cAAA,SAEA,MAAA,YAAA,MAAA,SAAA,GAAA,+BAEA,EAAA,MACA,KAAA,OACA,IAAA,OAAA,aAAA,gBACA,MAAA,SAAA,SAAA,QAAA,IACA,SAAA,OACA,QAAA,SAAA,GAGA,GAFA,OAAA,cAAA,MAAA,GAEA,EAAA,QAAA,CAEA,GAAA,WAAA,EAAA,MACA,aAAA,CACA;IAAA,GAAA,oBAAA,GAAA,eACA,cAAA,SAAA,EAAA,eAAA,kBAEA,IAAA,OAAA,MAAA,UAAA,cAAA,IAAA,GAAA,aAAA,GACA,QAAA,YAAA,MAAA,SAAA,GAAA,cAAA,OACA,OAAA,YAAA,MAAA,YAAA,gBAIA,QAAA,YAAA,MAAA,SAAA,GAAA,UAGA,QAAA,eACA,OAAA,eAKA,SAAA,UAAA,eAAA,SAAA,UACA,GAAA,QAAA,KACA,MAAA,KAAA,cAAA,SAEA,MAAA,YAAA,MAAA,SAAA,GAAA,2BAEA,EAAA,MACA,KAAA,OACA,IAAA,OAAA,aAAA,kBACA,MAAA,SAAA,SAAA,QAAA,IACA,SAAA,OACA,QAAA,SAAA,GAGA,GAFA,OAAA,cAAA,MAAA,GAEA,EAAA,QAAA,CAEA,GAAA,WAAA,EAAA,MACA,aAAA,CACA;IAAA,GAAA,oBAAA,GAAA,eACA,cAAA,SAAA,EAAA,eAAA,kBAEA,IAAA,OAAA,MAAA,UAAA,cAAA,IAAA,GAAA,aAAA,GACA,QAAA,YAAA,MAAA,SAAA,GAAA,UAAA,OACA,OAAA,YAAA,MAAA,YAAA,kBAGA,QAAA,YAAA,MAAA,SAAA,GAAA,UAGA,QAAA,eACA,OAAA,eAKA,SAAA,UAAA,IAAA,WAEA,GAAA,QAAA,IACA,MAAA,QAAA,gBACA,KAAA,QAAA,eAAA,MAGA,OAAA,UACA,OAAA,QAAA,qBACA,OAAA,QAAA,oBAAA,MAKA,EAAA,MACA,KAAA,OACA,IAAA,OAAA,aAAA,uBACA,QACA,SAAA,OACA,QAAA,SAAA,GACA,OAAA,QAAA,YACA,OAAA,QAAA,WAAA,KAAA,EAAA;KAOA,WAEA,OCzRA,6CAAA,SAAA,OAAA,wBAAA,SAAA,EAAA,GAAA,UACA,OACA,MAAA,WACA,GAAA,kBAAA,EAAA,+BACA,qBAAA,EAAA,6BACA,eAAA,EAAA,kBACA,iBAAA,EAAA,oBAEA,SACA,QAAA,WACA,iBAAA,QAEA,aAAA,WACA,qBAAA,KAAA,GAAA,qDAAA,QAEA,iBAAA,WACA,iBAAA,QAEA,eAAA,WACA,qBAAA,KAAA,GAAA,6CAAA,QAEA,WAAA,SAAA,UAAA,SACA,QACA,qBAAA,KAAA,GAAA,yCAAA,OAEA,qBAAA,KAAA,GAAA,0DAAA;EAGA,oBAAA,WACA,qBAAA,KAAA,GAAA,oCAAA,OACA,eAAA,OACA,iBAAA,SAIA,WAAA,GAAA,UAAA,mBAAA,QACA,YAAA,OAEA,eAAA,MAAA,WACA,QAAA,GAAA,gFACA,WAAA,qBAIA,iBAAA,MAAA,WACA,QAAA,GAAA,iFACA,WAAA,qBACA,qBAAA","sourcesContent":["/**\n * TaoGridClass is an easy way to display tao grid with the jqGrid jquery widget\n *\n * @example new TaoGridClass('#grid-container', 'myData.php', {});\n * @see TaoGridClass.defaultOptions for options example\n *\n * @require jquery >= 1.3.2 [http://jquery.com/]\n * @require jqgrid = 4.1.0 [http://www.trirand.com/blog/]\n *\n * @author CÃ©dric Alfonsi, <taosupport@tao.lu>\n */\n\n\n/**\n * Constructor\n * @param {String} selector the jquery selector of the tree container\n * @param {Object} model the model of the grid as defined by the server side script (see\n * @param {String} dataUrl the url to call, it must provide the json data to populate the tree\n * @param {Object} options\n */\nfunction TaoGridClass(selector, model, dataUrl, options)\n{\n\tthis.selector = selector;\n\tthis.jqGrid = null;\n\tthis.model = model;\n\tthis.data = new Array(); \t\t\t//displayed data (before preformating)\n\tthis.dataUrl = dataUrl;\n\tthis.jqGridModel = new Array();\n\tthis.jqGridColumns = new Array();\n\tthis.adapters = new Array();\t\t//adapters used in this grid\n\tthis.options = $.extend([], TaoGridClass.defaultOptions, options);\n\n\t//Default dimension\n\tif(this.options.height==null){\n\t\tthis.options.height = $(this.selector).parent().height();\n\t}\n\tif(this.options.width == null){\n\t\tthis.options.width = $(this.selector).parent().width();\n\t}\n\n\tthis.initModel();\n\tthis.initGrid();\n};\n\n/**\n * TaoGrid Class constants\n */\nTaoGridClass.__NEW_ROW__ = '__NEW_ROW__';\n\n/**\n * Init the jqGridModel\n */\nTaoGridClass.prototype.initModel = function()\n{\n\tvar columnsWeight = 0;\n\tvar gridWidth = this.options.width;\n\n\t//pre model analysis\n\tfor(var id in this.model){\n\t\tvar weight = typeof this.model[id]['weight'] != 'undefined' ? this.model[id]['weight'] : 1;\n\t\tcolumnsWeight += weight;\n\t}\n\n\t//jqgrid model\n\tvar i = 0;\n\tfor(var id in this.model){\n\n\t\t//position of the column\n\t\tvar position = typeof this.model[id].position != 'undefined' ? this.model[id].position: i;\n\t\t//create elements in tabs\n\t\tif(position!=i){\n\t\t\tthis.jqGridColumns.splice(position,0,null);\n\t\t\tthis.jqGridModel.splice(position,0,null);\n\t\t}\n\n\t\t//add a column\n\t\tthis.jqGridColumns[position] = this.model[id]['title']\n\n\t\t//add the model relative to the column\n\t\tthis.jqGridModel[position] = {\n\t\t\tname\t\t:this.model[id]['id']\n\t\t\t, index\t\t:this.model[id]['id']\n\t\t\t, align\t\t:typeof this.model[id]['align'] != 'undefined' ? this.model[id]['align'] : 'left'\n\t\t};\n\n\t\t//a specific formatter has to be applied to the column\n\t\tif(typeof this.model[id]['widget'] != 'undefined' && this.model[id]['widget']!='Label'){\n\t\t\t//get adapter for the given widget\n\t\t\tvar adapter = this.getAdapter(this.model[id]['widget']);\n\t\t\t//reference the adapter\n\t\t\tthis.adapters[this.model[id]['id']] = adapter;\n\t\t\t//add adapter function to the column model options\n\t\t\tthis.jqGridModel[position]['formatter'] = adapter.formatter;\n\t\t}\n\n\t\t// @todo DEVEL CODE\n\t\tif(this.model[id]['title'] == 'variables'){\n\t\t\tvar adapterClass = window['TaoGridActivityVariablesAdapter'];\n\t\t\tthis.jqGridModel[position]['formatter'] = adapterClass.formatter;\n\t\t}\n\n\t\t//fix the width of the column functions of its weight\n\t\tvar weight = typeof this.model[id]['weight'] != 'undefined' ? this.model[id]['weight'] : 1;\n\t\tvar width = ((gridWidth * weight) / columnsWeight) - 4; /* -5 padding margin of the cell container */\n\t\t//console.log('Et alors la width ca donne quoi '+gridWidth+\" \"+width);\n\t\tthis.jqGridModel[position]['width'] = width;\n\n\t\ti++;\n\t}\n};\n\n/**\n * Init the grid\n */\nTaoGridClass.prototype.initGrid = function()\n{\n\t//if data url, data have to be formated to fit the following sample\n\t//\t$test = array(\n\t//\t\t\"page\"\t\t=> 1\n\t//\t\t, \"total\"\t=> 1\n\t//\t\t, \"records\"\t=> 10\n\t//\t\t, \"rows\" \t=> $returnValue\n\t//\t);\n\n\tvar self = this;\n\tthis.jqGrid = $(this.selector).jqGrid({\n\t\t//url\t\t\t: this.dataUrl,\n\t\tdatatype\t: \"local\",\n\t    mtype\t\t: 'GET',\n\t\tcolNames\t: this.jqGridColumns,\n\t\tcolModel\t: this.jqGridModel,\n\t\tshrinkToFit\t: true,\n\t\t//width\t\t: parseInt($(\"#result-list\").parent().width()) - 15,\n\t\t//sortname\t: 'id',\n\t\t//sortorder\t: \"asc\",\n\t\tcaption\t\t: this.options.title,\n\t\tjsonReader: {\n\t\t\trepeatitems : false,\n\t\t\tid: \"0\"\n\t\t},\n\t\theight\t\t: this.options.height - 54,\n//\t\twidth\t\t: '100%',\n\t\tautowidth\t: true,\n\t\tonSelectRow: function(id){\n\t\t    if(self.options.callback.onSelectRow != null){\n\t\t    \tself.options.callback.onSelectRow(id);\n\t\t    }\n\t\t}\n\n\t});\n};\n\n/**\n * Get formatter relative to a widget\n * @param {String} widget Name of the widget\n */\nTaoGridClass.prototype.getAdapter = function(widget)\n{\n\tvar returnValue = null;\n\n\tvar adapterClassName = 'TaoGrid'+widget+'Adapter';\n\tvar adapterClass = window[adapterClassName];\n\tif(!adapterClass){\n\t\tthrow new Error('Tao grid adapter (TaoGrid'+widget+'Adapter) does not exist');\n\t}\n\treturnValue = adapterClass;\n\n\treturn returnValue;\n};\n\n/**\n * Get formatters relative to a column\n * @param {String|Array} widget Array of widgets or widget\n */\n/*TaoGridClass.prototype.getAdapters = function(widgets)\n{\n\tvar returnValue = new Array();\n\n\tif(widgets instanceof Array){\n\t\tfor(var i in widget){\n\t\t\treturnValue.push(this.getAdapter(widgets[i]));\n\t\t}\n\t}else{\n\t\treturnValue.push(this.getAdapter(widgets));\n\t}\n\n\treturn returnValue;\n}*/\n\n/**\n * Empty the grid\n */\nTaoGridClass.prototype.empty = function()\n{\n\tvar gridBody = $(this.selector).children(\"tbody\");\n\tvar firstRow = gridBody.children(\"tr.jqgfirstrow\");\n\tgridBody.empty().append(firstRow);\n\tthis.data = new Array();\n};\n\n\n/**\n * Delete a row\n * @param {Array} data\n */\nTaoGridClass.prototype.deleteRow = function(rowId)\n{\n\tjQuery(this.selector).jqGrid('delRowData', rowId);\n};\n\n/**\n * Refresh data\n * @param {Array} data\n */\nTaoGridClass.prototype.refresh = function(data)\n{\n\tfor(var rowId in data){\n\t\tthis.data[rowId] = null;\n\t\tthis.data[rowId] = data[rowId];\n\n\t\tfor(var columnId in this.adapters){\n\t\t\tif(typeof this.adapters[columnId].preFormatter != 'undefined'){\n\t\t\t\tthis.data[rowId][columnId] = this.adapters[columnId].preFormatter(this, this.data[rowId], rowId, columnId);\n\t\t\t}\n\t\t}\n\n\t\tjQuery(this.selector).jqGrid('setRowData', rowId, this.data[rowId]);\n\n\t\tfor(var columnId in this.adapters){\n\t\t\tif(typeof this.adapters[columnId].postCellFormat != 'undefined'){\n\t\t\t\tvar cell = this.getCell(rowId, columnId);\n\t\t\t\tthis.adapters[columnId].postCellFormat(this, cell, rowId, columnId);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Get the position of a row\n * @param {String} rowId The target rowId\n */\nTaoGridClass.prototype.getPosition = function(rowId)\n{\n\tvar returnValue = -1;\n\tvar i = -1;\t//not 0 because the header tr\n\t$(this.selector).find('tbody:first').children().each(function(){\n\t\tif($(this).attr('id') == rowId){\n\t\t\treturnValue = i;\n\t\t\treturn;\n\t\t}\n\t\ti++;\n\t});\n\treturn returnValue;\n};\n\n/**\n * Edit a row\n * @param {integer} rowId Id of the row to edit\n */\nTaoGridClass.prototype.editRow = function(rowId)\n{\n\tvar self = this;\n\tvar actionsHtml = '<div class=\"grid-row-actions\"> \\\n\t\t<a href=\"#\" class=\"grid-row-action grid-row-save\"><img src=\"'+root_url+'tao/views/img/save.png\"/> Save</a> \\\n\t\t<a href=\"#\" class=\"grid-row-action grid-row-cancel\"><img src=\"'+root_url+'tao/views/img/revert.png\"/> Cancel</a> \\\n\t</div>';\n\tvar row = this.getRow(rowId);\n\n\t//add actions\n\tvar $actionContainer = $(actionsHtml).insertAfter($(row));\n\t//apply the edit formatter of each cells\n\tfor(var columnId in this.adapters){\n\t\tif(typeof this.adapters[columnId].editFormatter != 'undefined'){\n\t\t\tvar cell = this.getCell(rowId, columnId);\n\t\t\tthis.adapters[columnId].editFormatter(this, cell, rowId, columnId);\n\t\t}\n\t}\n\n\t//bind new row actions\n\t//bind the save action\n\t$actionContainer.find('.grid-row-save').one('click', function(){\n\t\tvar rowData = [];\n\t\tfor(var columnId in self.adapters){\n\t\t\tif(typeof self.adapters[columnId].getEditedValue != 'undefined'){\n\t\t\t\tvar cell = self.getCell(rowId, columnId);\n\t\t\t\trowData[columnId] = self.adapters[columnId].getEditedValue(self, cell, rowId, columnId);\n\t\t\t}else{\n\t\t\t\trowData[columnId] = self.data[rowId];\n\t\t\t}\n\t\t}\n\t\t$actionContainer.remove();\n\t\tif(self.options.callback.saveEditedRow != null){\n\t    \tself.options.callback.saveEditedRow(rowId, rowData);\n\t    }\n\t});\n\n\t//bind the cancel action\n\t$actionContainer.find('.grid-row-cancel').one('click', function(){\n\t\tvar dataToRefresh = [];\n\t\tdataToRefresh[rowId] = self.getRowData(rowId);\n\t\tself.refresh(dataToRefresh);\n\t\t$actionContainer.remove();\n\t});\n};\n\n/**\n * Add new row to the grid, and let the user edit it\n */\nTaoGridClass.prototype.newRow = function(data)\n{\n\tvar self = this;\n\tvar defaultRowData = {\n\t\t'code':'', value:[]\n\t};\n\tvar rowId = TaoGridClass.__NEW_ROW__;\n\tvar actionsHtml = '<div class=\"grid-row-actions\"> \\\n\t\t<a href=\"#\" class=\"grid-row-action grid-row-save\"><img src=\"'+root_url+'tao/views/img/save.png\"/> Save</a> \\\n\t\t<a href=\"#\" class=\"grid-row-action grid-row-cancel\"><img src=\"'+root_url+'tao/views/img/revert.png\"/> Cancel</a> \\\n\t</div>';\n\tvar row = null;\n\n\t//add new row with default row values\n\tjQuery(this.selector).jqGrid('addRowData', rowId, defaultRowData);\n\trow = this.getRow(rowId);\n\t//add actions\n\tvar $actionContainer = $(actionsHtml).insertAfter($(row));\n\t//apply the edit formatter of each cells\n\tfor(var columnId in this.adapters){\n\t\tif(typeof this.adapters[columnId].editFormatter != 'undefined'){\n\t\t\tvar cell = this.getCell(rowId, columnId);\n\t\t\tthis.adapters[columnId].editFormatter(this, cell, rowId, columnId);\n\t\t}\n\t}\n\n\t//bind new row actions\n\t//bind the save action\n\t$actionContainer.find('.grid-row-save').click(function(){\n\t\tvar rowData = [];\n\t\tfor(var columnId in self.adapters){\n\t\t\tif(typeof self.adapters[columnId].getEditedValue != 'undefined'){\n\t\t\t\tvar cell = self.getCell(rowId, columnId);\n\t\t\t\trowData[columnId] = self.adapters[columnId].getEditedValue(self, cell, rowId, columnId);\n\t\t\t}else{\n\t\t\t\trowData[columnId] = self.data[rowId];\n\t\t\t}\n\t\t}\n\t\t$actionContainer.remove();\n\t\tif(self.options.callback.saveNewRow != null){\n\t    \tself.options.callback.saveNewRow(rowId, rowData);\n\t    }\n\t});\n\n\t//bind the cancel action\n\t$actionContainer.find('.grid-row-cancel').click(function(){\n\t\tjQuery(self.selector).jqGrid('delRowData', rowId);\n\t\t$actionContainer.remove();\n\t});\n};\n\n/**\n * Add data to the grid\n * @param {Array} data\n */\nTaoGridClass.prototype.add = function(data)\n{\n\tvar self = this;\n\tvar crtLine = 0;\n\t//this.data = this.data.concat(data); // does not work with associative array\n\tfor(var i in data){\n\t\tthis.data[i] = data[i];\n\t}\n\n\tfor(var rowId in data){\n\t\t//Pre rendering adapt data\n\t\tfor(var columnId in this.adapters){\n\t\t\tif(typeof this.adapters[columnId].preFormatter != 'undefined'){\n\t\t\t\tthis.data[rowId][columnId] = this.adapters[columnId].preFormatter(this, this.data[rowId], rowId, columnId);\n\t\t\t}\n\t\t}\n\t\t//Pre rendering adapt data functions of predefined macros\n/*\t\tfor(var modelId in this.model){\n\t\t\tvar columnId = this.model[modelId]['id'];\n//\t\t\tconsole.log('my column Id '+columnId);\n\t\t\tif(typeof this.model[columnId] == 'undefined'){\n//\t\t\t\tconsole.log('undefined '+columnId);\n//\t\t\t\tconsole.log(this.model);\n\t\t\t}\n\t\t\tif(typeof this.model[modelId].preFormatter != 'undefined' && this.model[modelId].preFormatter){\n\t\t\t\tswitch(this.model[modelId].preFormatter){\n\t\t\t\t\tcase 'empty':\n//\t\t\t\t\t\tconsole.log('empty');\n\t\t\t\t\t\tthis.data[rowId][columnId] = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'rowId':\n//\t\t\t\t\t\tconsole.log('ROWWWW ID '+rowId);\n\t\t\t\t\t\tthis.data[rowId][columnId] = rowId;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}*/\n\t\t//Render data\n\t\tjQuery(this.selector).jqGrid('addRowData', rowId, this.data[rowId]);\n\t\t//Post rendering adapt content\n\t\tfor(var columnId in this.adapters){\n\t\t\tif(typeof this.adapters[columnId].postCellFormat != 'undefined'){\n\t\t\t\tvar cell = this.getCell(rowId, columnId);\n\t\t\t\tthis.adapters[columnId].postCellFormat(this, cell, rowId, columnId);\n\t\t\t}\n\t\t}\n\t\tcrtLine ++;\n\n\t\t//bind actions\n\t\tvar row = this.getRow(rowId);\n\t\t$(row).find('> td').dblclick(function(){\n\t\t\tvar cellIdentifier = self.getCellIdentifier(this);\n\t\t\tself.editRow(cellIdentifier.rowId);\n\t\t});\n\t}\n\treturn crtLine;\n};\n\n/**\n * Get row\n * @param {String} rowId\n */\nTaoGridClass.prototype.getRow = function(rowId)\n{\n\tvar returnValue = null;\n\tvar $row = $(this.selector).find('tr[id=\"'+rowId+'\"]');\n\tif($row.length > 0){\n\t\treturnValue = $row.get(0);\n\t}\n\treturn returnValue;\n};\n\n/**\n * Get cell\n * @param {String} rowId\n * @param {String} columnId\n */\nTaoGridClass.prototype.getCell = function(rowId, columnId)\n{\n\tvar returnValue = null;\n\t$cell = $(this.selector).find('tr[id=\"'+rowId+'\"]').find('td[aria-describedby=\"'+this.selector.slice(1)+'_'+columnId+'\"]');\n\tif($cell.length > 0){\n\t\treturnValue = $cell.get(0);\n\t}\n\treturn returnValue;\n};\n\n/**\n * Get row data\n * @param {String} rowId\n */\nTaoGridClass.prototype.getRowData = function(rowId)\n{\n\tif(typeof this.data[rowId] != 'undefined'){\n\t\treturn this.data[rowId];\n\t}\n};\n\n/**\n * Get row data\n * @param {String} rowId\n * @param {String} columnId\n */\nTaoGridClass.prototype.getCellData = function(rowId, columnId)\n{\n\tvar returnValue = null;\n\tvar rowData = this.getRowData(rowId);\n\tif(rowData){\n\t\tif(typeof rowData[columnId] != 'undefined'){\n\t\t\treturnValue = rowData[columnId];\n\t\t}\n\t}\n\treturn returnValue;\n};\n\n/**\n * Get position of a cell\n * {columnId} & {rowId}\n * @param {HtmlElement} cell\n */\nTaoGridClass.prototype.getCellIdentifier = function(cell)\n{\n\tvar returnValue = {rowId:null, columnId:null};\n\tvar columnTmp = $(cell).attr('aria-describedby');\n\tif(columnTmp){\n\t\tcolumnTmp = columnTmp.substr(this.selector.length);\n\t\treturnValue.columnId = columnTmp;\n\t}\n\tvar $row = $(cell).parent('tr');\n\tvar rowTmp = $row.attr('id');\n\tif(rowTmp){\n\t\treturnValue.rowId = rowTmp;\n\t}\n\treturn returnValue;\n};\n\n/**\n * TaoGridClass default options\n */\nTaoGridClass.defaultOptions = {\n\theight: null,\n\twidth: null,\n\ttitle: 'GRID',\n\tcallback: {\n\t\tonSelectRow: null\n\t}\n};\ndefine(\"grid/tao.grid\", function(){});\n\n","define('generisHard/controller/routes',[],function(){\n    return {\n        'Optimize' : {\n            'actions' : {\n                'index' : 'controller/settings/optimizer'\n            }\n        },\n    };\n});\n\n","\ndefine('generisHard/Switcher',['jquery', 'context', 'i18n'], function($, context, __){\n    'use strict';\n\n    //create a grid, and update it after each hardification:\n    function Switcher(tableElementId, userOptions){\n\n            this.options = {\n                    onStart: function(){},\n                    onStartDecompile: function(){},\n                    onStartEmpty: function(){},\n                    beforeComplete: function(){},\n                    onComplete: function(){},\n                    onCompleteDecompile: function(){}\n            };\n\n            if (userOptions){\n                    this.options = $.extend(this.options, userOptions);\n            }\n\n            this.$grid = $('#'+tableElementId);\n            this.theData = [];\n            this.currentIndex = -1;\n            this.forcedStart = false;\n            this.decompile = false;\n\n            Switcher.instances[tableElementId] = this;\n    }\n\n    Switcher.instances = [];\n\n    Switcher.prototype.getActionUrl = function(action){\n            var url = context.root_url;\n            url += 'generisHard/Optimize/' + action;\n\n            return url;\n    };\n\n    Switcher.prototype.init = function(){\n\n            var __this = this;\n            var actionUrl = __this.getActionUrl('optimizeClasses');\n\n            $.ajax({\n                    type: \"POST\",\n                    url: actionUrl,\n                    data: {},\n                    dataType: 'json',\n                    success: function(r){\n                            if (r.length == 0){\n                                    if(__this.options.onStartEmpty) __this.options.onStartEmpty(__this);\n                                    return false;\n                            }\n\n                            var gridOptions = {\n                                            datatype: \"local\", \n                                            hidegrid : false,\n                                            colNames: [ __('Classes'), __('Status'), __('Instances')], \n                                            colModel: [ \n                                                       {name: 'class', index: 'class', sortable: false},\n                                                       {name: 'status', index: 'status', align: 'center', sortable: false},\n                                                       {name: 'count', index: 'count', align: 'center', sortable: false}\n                                                       ], \n                                                       height: 'auto', \n                                                       autowidth: true,\n                                                       width:(parseInt(__this.$grid.width()) - 2),\n                                                       sortname: 'status', \n                                                       sortorder: \"asc\", \n                                                       caption: __(\"Available Classes\"),\n\n                            };\n\n                            //build jqGrid:\n                            require(['require', 'jquery', 'grid/tao.grid'], function(req, $) {\n                                    __this.$grid.jqGrid(gridOptions);\n\n                                    //insert rows:\n                                    var i = 0;\n                                    for (var uri in r){\n                                            var row = r[uri];\n                                            var rClass = row['class'];\n                                            var rClassUri = row['classUri'];\n                                            var rStatus = (row['status'] === 'compiled') ? __('Production') : __('Design') ;\n                                            var rCount = row['count'];\n                                            var rStatusTag = row['status'];\n                                            __this.setRowData(i, {'class': rClass, 'status': rStatus, 'count': rCount, 'classUri': rClassUri, 'statusTag': rStatusTag});\n                                            i++;\n                                    }\n                            });\n\n                    }\n            });\n\n            return true;\n    };\n\n    Switcher.prototype.startCompilation = function(){\n                    this.decompile = false;\n                    this.currentIndex = 0;\n\n            for (var j = 0; j < this.theData.length; j++){\n                            if (this.currentIndex < 0 && this.theData[j].statusTag !== 'compiled'){\n                                            this.currentIndex = j;\n                            }\n                    }\n\n                    if (this.options.onStart){\n                        this.options.onStart(this);\n                    }\n\n            this.nextStep();\n    };\n\n    Switcher.prototype.startDecompilation = function(){\n                    this.currentIndex = 0;\n                    this.decompile = true;\n\n            if (this.options.onStartDecompile){\n                    this.options.onStartDecompile(this);\n            }\n\n            for (var j = 0; j < this.theData.length; j++){\n                            if (this.currentIndex < 0 && this.theData[j].statusTag !== 'decompiled'){\n                                            this.currentIndex = j;\n                            }\n                    }\n\n            this.nextStep();\n    };\n\n    Switcher.prototype.setRowData = function(rowId, data){\n\n            if (typeof(this.theData[rowId]) !== 'undefined'){\n                    this.$grid.jqGrid('setRowData', rowId, data);\n            }\n            else{\n                    this.$grid.jqGrid('addRowData', rowId, data);\n            }\n\n            this.theData[rowId] = data;\n    };\n\n    Switcher.prototype.setCellData = function(rowId, colName, data){\n            this.$grid.jqGrid('setCell', rowId, colName, data);\n            this.theData[rowId][colName] = data;\n    };\n\n    Switcher.prototype.addResultData = function(rowId, data){\n            this.theData[rowId].compilationResults = null;\n            this.theData[rowId].compilationResults = data;\n    };\n\n    Switcher.prototype.getRowIdByUri = function(classUri){\n            var returnValue = -1;\n\n            for (var rowId in this.theData){\n\n                    if (this.theData[rowId].classUri === classUri){\n                            returnValue = rowId;\n                            break;\n                    }\n            }\n\n            return returnValue;\n    };\n\n    Switcher.prototype.nextStep = function(){\n            if (this.currentIndex < this.theData.length){\n                    if (this.decompile === true && this.theData[this.currentIndex].statusTag !== 'decompiled'){\n                            this.decompileClass(this.theData[this.currentIndex].classUri);\n                    }\n                    else if (this.decompile === false && this.theData[this.currentIndex].statusTag !== 'compiled'){\n                            this.compileClass(this.theData[this.currentIndex].classUri);   \n                    }\n            }\n            else{\n                    this.end();\n            }\n    };\n\n    Switcher.prototype.compileClass = function(classUri){\n            var __this = this;\n            var rowId = this.getRowIdByUri(classUri);\n\n            this.setCellData(rowId, 'status', __('Switching to Production...'));\n\n            $.ajax({\n                    type: \"POST\",\n                    url: __this.getActionUrl('compileClass'),\n                    data: {classUri : classUri, options: ''},\n                    dataType: \"json\",\n                    success: function(r){\n                            __this.addResultData(rowId, r);\n\n                            if (r.success){\n                                   //update grid\n                                    var selfCount = r.count;\n                                    var relatedCount = 0;\n                                    for(var relatedClassName in r.relatedClasses){\n                                            relatedCount += parseInt(r.relatedClasses[relatedClassName]);\n                                    }\n                                    var count = ' (' + (selfCount + relatedCount) + ' ' + __('instances') + ')';\n                                    __this.setCellData(rowId, 'status', __('Production') + count);\n                                    __this.setCellData(rowId, 'statusTag', 'compiled');\n\n                            }\n                            else{\n                                    __this.setCellData(rowId, 'status', __('Failed'));\n                            }\n\n                            __this.currentIndex ++;\n                            __this.nextStep();\n                    }\n            });\n    };\n\n    Switcher.prototype.decompileClass = function(classUri){\n            var __this = this;\n            var rowId = this.getRowIdByUri(classUri);\n\n            this.setCellData(rowId, 'status', __('Switching to Design...'));\n\n            $.ajax({\n                    type: \"POST\",\n                    url: __this.getActionUrl('decompileClass'),\n                    data: {classUri : classUri, options: ''},\n                    dataType: \"json\",\n                    success: function(r){\n                    __this.addResultData(rowId, r);\n\n                    if (r.success){\n                            //update grid\n                            var selfCount = r.count;\n                            var relatedCount = 0;\n                            for(var relatedClassName in r.relatedClasses){\n                                    relatedCount += parseInt(r.relatedClasses[relatedClassName]);\n                            }\n                            var count = ' (' + (selfCount + relatedCount) + ' ' + __('instances') + ')';\n                            __this.setCellData(rowId, 'status', __('Design') + count);\n                            __this.setCellData(rowId, 'statusTag', 'decompiled');\n                    }\n                    else{\n                            __this.setCellData(rowId, 'status', __('Failed'));\n                    }\n\n                    __this.currentIndex ++;\n                    __this.nextStep();\n                }\n            });\n    };\n\n    Switcher.prototype.end = function(){\n\n            var __this = this;\n            if (this.options.beforeComplete){\n                    this.options.beforeComplete(this);\n            }\n\n            if (__this.decompile){\n                    if (__this.options.onCompleteDecompile){\n                            __this.options.onCompleteDecompile(this);\n                    }\n            }\n            else{\n                  //send the ending request: index the properties:\n                    $.ajax({\n                            type: \"POST\",\n                            url: __this.getActionUrl('createPropertyIndex'),\n                            data: {},\n                            dataType: \"json\",\n                            success: function (r){\n                                    if(__this.options.onComplete){\n                                            __this.options.onComplete(this, r.success);\n                                    }\n                            }\n                    });  \n            }        \n    };\n    \n    return Switcher;\n});\n","define('generisHard/controller/settings/optimizer',['jquery', 'i18n', 'generisHard/Switcher'], function($, __, Switcher){\n    return {\n        start: function(){\n            var $compilationGrid =  $('#compilation-grid-container');\n            var $compilationResutlts = $('#compilation-grid-results');\n            var $compileButton = $('#compileButton');\n            var $decompileButton = $('#decompileButton');\n            \n            var options = {\n                    onStart:function(){\n                        $compilationGrid.show();\n                    },\n                    onStartEmpty:function(){\n                        $compilationResutlts.html(__('There are no classes available for optimization.')).show();\n                    },\n                    onStartDecompile:function(){\n                        $compilationGrid.show();\n                    },\n                    beforeComplete: function(){\n                        $compilationResutlts.html(__('Rebuilding indexes, it may take a while.')).show();\n                    },\n                    onComplete:function(aSwitcher, success){\n                            if(success){\n                                $compilationResutlts.html(__('Switch to Production Mode completed.')).show();\n                            } else{\n                                $compilationResutlts.html(__('Cannot successfully build the optimized table indexes')).show();\n                            }\n                    },\n                    onCompleteDecompile:function(){\n                        $compilationResutlts.html(__('Switch to Design Mode completed')).show();\n                        $compileButton.show();\n                        $decompileButton.show();\n                    }\n            };\n\n            var mySwitcher = new Switcher('compilation-grid', options);\n            mySwitcher.init();\n\n            $compileButton.click(function(){\n                if(confirm(__('All classes in Design Mode will switch to Production Mode. Please confirm.'))){\n                    mySwitcher.startCompilation();\n                }\n            });\n\n            $decompileButton.click(function(){\n                if(confirm(__('All classes in Production Mode will switch to Design Mode. Please confirm.'))){\n                    mySwitcher.startDecompilation();\n                    $compilationResutlts.hide();\n                }\n            });\n        }\n    };\n});\n\n\n\n"]}