{"version":3,"file":"routes.js","sources":["../../grid/tao.grid.js","routes.js","../Switcher.js","settings/optimizer.js"],"names":["TaoGridClass","selector","model","dataUrl","options","this","jqGrid","data","jqGridModel","jqGridColumns","adapters","$","extend","defaultOptions","height","parent","width","initModel","initGrid","define","Optimize","actions","index","__NEW_ROW__","prototype","columnsWeight","gridWidth","id","weight","i","position","splice","name","align","adapter","getAdapter","formatter","adapterClass","window","self","datatype","mtype","colNames","colModel","shrinkToFit","caption","title","jsonReader","repeatitems","autowidth","onSelectRow","callback","widget","returnValue","adapterClassName","Error","empty","gridBody","children","firstRow","append","clearGridData","deleteRow","rowId","jQuery","refresh","columnId","preFormatter","postCellFormat","cell","getCell","getPosition","find","each","attr","editRow","actionsHtml","root_url","row","getRow","$actionContainer","insertAfter","editFormatter","one","rowData","getEditedValue","remove","saveEditedRow","dataToRefresh","getRowData","newRow","defaultRowData","code","value","click","saveNewRow","add","crtLine","dblclick","cellIdentifier","getCellIdentifier","$row","length","get","$cell","slice","getCellData","columnTmp","substr","rowTmp","context","__","Switcher","tableElementId","userOptions","onStart","onStartDecompile","onStartEmpty","beforeComplete","onComplete","onCompleteDecompile","$grid","theData","currentIndex","forcedStart","decompile","instances","getActionUrl","action","url","init","__this","actionUrl","ajax","type","dataType","success","r","gridOptions","hidegrid","sortable","parseInt","sortname","sortorder","require","uri","rClass","rClassUri","rStatus","rCount","rStatusTag","setRowData","class","status","count","classUri","statusTag","startCompilation","j","nextStep","startDecompilation","setCellData","colName","addResultData","compilationResults","getRowIdByUri","decompileClass","compileClass","end","selfCount","relatedCount","relatedClassName","relatedClasses","start","$compilationGrid","$compilationResutlts","$compileButton","$decompileButton","show","html","aSwitcher","mySwitcher","confirm","hide"],"mappings":"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","sourcesContent":["/**\n * TaoGridClass is an easy way to display tao grid with the jqGrid jquery widget\n *\n * @example new TaoGridClass('#grid-container', 'myData.php', {});\n * @see TaoGridClass.defaultOptions for options example\n *\n * @require jquery >= 1.3.2 [http://jquery.com/]\n * @require jqgrid = 4.1.0 [http://www.trirand.com/blog/]\n *\n * @author Cédric Alfonsi, <taosupport@tao.lu>\n */\n\n\n/**\n * Constructor\n * @param {String} selector the jquery selector of the tree container\n * @param {Object} model the model of the grid as defined by the server side script (see\n * @param {String} dataUrl the url to call, it must provide the json data to populate the tree\n * @param {Object} options\n */\nfunction TaoGridClass(selector, model, dataUrl, options)\n{\n\tthis.selector = selector;\n\tthis.jqGrid = null;\n\tthis.model = model;\n\tthis.data = []; \t\t\t//displayed data (before preformating)\n\tthis.dataUrl = dataUrl;\n\tthis.jqGridModel = [];\n\tthis.jqGridColumns = [];\n\tthis.adapters = [];\t\t//adapters used in this grid\n\tthis.options = $.extend([], TaoGridClass.defaultOptions, options);\n\n\t//Default dimension\n\tif(this.options.height==null){\n\t\tthis.options.height = $(this.selector).parent().height();\n\t}\n\tif(this.options.width == null){\n\t\tthis.options.width = $(this.selector).parent().width();\n\t}\n\n\tthis.initModel();\n\tthis.initGrid();\n}\n\n/**\n * TaoGrid Class constants\n */\nTaoGridClass.__NEW_ROW__ = '__NEW_ROW__';\n\n/**\n * Init the jqGridModel\n */\nTaoGridClass.prototype.initModel = function()\n{\n\tvar columnsWeight = 0;\n\tvar gridWidth = this.options.width;\n\n\t//pre model analysis\n\tfor(var id in this.model){\n\t\tvar weight = typeof this.model[id]['weight'] != 'undefined' ? this.model[id]['weight'] : 1;\n\t\tcolumnsWeight += weight;\n\t}\n\n\t//jqgrid model\n\tvar i = 0;\n\tfor(var id in this.model){\n\n\t\t//position of the column\n\t\tvar position = typeof this.model[id].position != 'undefined' ? this.model[id].position: i;\n\t\t//create elements in tabs\n\t\tif(position!=i){\n\t\t\tthis.jqGridColumns.splice(position,0,null);\n\t\t\tthis.jqGridModel.splice(position,0,null);\n\t\t}\n\n\t\t//add a column\n\t\tthis.jqGridColumns[position] = this.model[id]['title']\n\n\t\t//add the model relative to the column\n\t\tthis.jqGridModel[position] = {\n\t\t\tname\t\t:this.model[id]['id']\n\t\t\t, index\t\t:this.model[id]['id']\n\t\t\t, align\t\t:typeof this.model[id]['align'] != 'undefined' ? this.model[id]['align'] : 'left'\n\t\t};\n\n\t\t//a specific formatter has to be applied to the column\n\t\tif(typeof this.model[id]['widget'] != 'undefined' && this.model[id]['widget']!='Label'){\n\t\t\t//get adapter for the given widget\n\t\t\tvar adapter = this.getAdapter(this.model[id]['widget']);\n\t\t\t//reference the adapter\n\t\t\tthis.adapters[this.model[id]['id']] = adapter;\n\t\t\t//add adapter function to the column model options\n\t\t\tthis.jqGridModel[position]['formatter'] = adapter.formatter;\n\t\t}\n\n\t\t// @todo DEVEL CODE\n\t\tif(this.model[id]['title'] == 'variables'){\n\t\t\tvar adapterClass = window['TaoGridActivityVariablesAdapter'];\n\t\t\tthis.jqGridModel[position]['formatter'] = adapterClass.formatter;\n\t\t}\n\n\t\t//fix the width of the column functions of its weight\n\t\tvar weight = typeof this.model[id]['weight'] != 'undefined' ? this.model[id]['weight'] : 1;\n\t\tvar width = ((gridWidth * weight) / columnsWeight) - 4; /* -5 padding margin of the cell container */\n\t\t//console.log('Et alors la width ca donne quoi '+gridWidth+\" \"+width);\n\t\tthis.jqGridModel[position]['width'] = width;\n\n\t\ti++;\n\t}\n};\n\n/**\n * Init the grid\n */\nTaoGridClass.prototype.initGrid = function()\n{\n\t//if data url, data have to be formated to fit the following sample\n\t//\t$test = array(\n\t//\t\t\"page\"\t\t=> 1\n\t//\t\t, \"total\"\t=> 1\n\t//\t\t, \"records\"\t=> 10\n\t//\t\t, \"rows\" \t=> $returnValue\n\t//\t);\n\n\tvar self = this;\n\tthis.jqGrid = $(this.selector).jqGrid({\n\t\t//url\t\t\t: this.dataUrl,\n\t\tdatatype\t: \"local\",\n\t    mtype\t\t: 'GET',\n\t\tcolNames\t: this.jqGridColumns,\n\t\tcolModel\t: this.jqGridModel,\n\t\tshrinkToFit\t: true,\n\t\t//width\t\t: parseInt($(\"#result-list\").parent().width()) - 15,\n\t\t//sortname\t: 'id',\n\t\t//sortorder\t: \"asc\",\n\t\tcaption\t\t: this.options.title,\n\t\tjsonReader: {\n\t\t\trepeatitems : false,\n\t\t\tid: \"0\"\n\t\t},\n\t\theight\t\t: this.options.height - 54,\n//\t\twidth\t\t: '100%',\n\t\tautowidth\t: true,\n\t\tonSelectRow: function(id){\n\t\t    if(self.options.callback.onSelectRow !== null){\n\t\t    \tself.options.callback.onSelectRow(id);\n\t\t    }\n\t\t}\n\n\t});\n};\n\n/**\n * Get formatter relative to a widget\n * @param {String} widget Name of the widget\n */\nTaoGridClass.prototype.getAdapter = function(widget)\n{\n\tvar returnValue = null;\n\n\tvar adapterClassName = 'TaoGrid'+widget+'Adapter';\n\tvar adapterClass = window[adapterClassName];\n\tif(!adapterClass){\n\t\tthrow new Error('Tao grid adapter (TaoGrid'+widget+'Adapter) does not exist');\n\t}\n\treturnValue = adapterClass;\n\n\treturn returnValue;\n};\n\n/**\n * Get formatters relative to a column\n * @param {String|Array} widget Array of widgets or widget\n */\n/*TaoGridClass.prototype.getAdapters = function(widgets)\n{\n\tvar returnValue = new Array();\n\n\tif(widgets instanceof Array){\n\t\tfor(var i in widget){\n\t\t\treturnValue.push(this.getAdapter(widgets[i]));\n\t\t}\n\t}else{\n\t\treturnValue.push(this.getAdapter(widgets));\n\t}\n\n\treturn returnValue;\n}*/\n\n/**\n * Empty the grid\n */\nTaoGridClass.prototype.empty = function()\n{\n\tvar gridBody = $(this.selector).children(\"tbody\");\n\tvar firstRow = gridBody.children(\"tr.jqgfirstrow\");\n\tgridBody.empty().append(firstRow);\n\tthis.data = [];\n\tthis.jqGrid.clearGridData();\n};\n\n\n/**\n * Delete a row\n * @param {Array} data\n */\nTaoGridClass.prototype.deleteRow = function(rowId)\n{\n\tjQuery(this.selector).jqGrid('delRowData', rowId);\n};\n\n/**\n * Refresh data\n * @param {Array} data\n */\nTaoGridClass.prototype.refresh = function(data)\n{\n\tfor(var rowId in data){\n\t\tthis.data[rowId] = null;\n\t\tthis.data[rowId] = data[rowId];\n\n\t\tfor(var columnId in this.adapters){\n\t\t\tif(typeof this.adapters[columnId].preFormatter != 'undefined'){\n\t\t\t\tthis.data[rowId][columnId] = this.adapters[columnId].preFormatter(this, this.data[rowId], rowId, columnId);\n\t\t\t}\n\t\t}\n\n\t\tjQuery(this.selector).jqGrid('setRowData', rowId, this.data[rowId]);\n\n\t\tfor(var columnId in this.adapters){\n\t\t\tif(typeof this.adapters[columnId].postCellFormat != 'undefined'){\n\t\t\t\tvar cell = this.getCell(rowId, columnId);\n\t\t\t\tthis.adapters[columnId].postCellFormat(this, cell, rowId, columnId);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Get the position of a row\n * @param {String} rowId The target rowId\n */\nTaoGridClass.prototype.getPosition = function(rowId)\n{\n\tvar returnValue = -1;\n\tvar i = -1;\t//not 0 because the header tr\n\t$(this.selector).find('tbody:first').children().each(function(){\n\t\tif($(this).attr('id') == rowId){\n\t\t\treturnValue = i;\n\t\t\treturn;\n\t\t}\n\t\ti++;\n\t});\n\treturn returnValue;\n};\n\n/**\n * Edit a row\n * @param {integer} rowId Id of the row to edit\n */\nTaoGridClass.prototype.editRow = function(rowId)\n{\n\tvar self = this;\n\tvar actionsHtml = '<div class=\"grid-row-actions\"> \\\n\t\t<a href=\"#\" class=\"grid-row-action grid-row-save\"><img src=\"'+root_url+'tao/views/img/save.png\"/> Save</a> \\\n\t\t<a href=\"#\" class=\"grid-row-action grid-row-cancel\"><img src=\"'+root_url+'tao/views/img/revert.png\"/> Cancel</a> \\\n\t</div>';\n\tvar row = this.getRow(rowId);\n\n\t//add actions\n\tvar $actionContainer = $(actionsHtml).insertAfter($(row));\n\t//apply the edit formatter of each cells\n\tfor(var columnId in this.adapters){\n\t\tif(typeof this.adapters[columnId].editFormatter != 'undefined'){\n\t\t\tvar cell = this.getCell(rowId, columnId);\n\t\t\tthis.adapters[columnId].editFormatter(this, cell, rowId, columnId);\n\t\t}\n\t}\n\n\t//bind new row actions\n\t//bind the save action\n\t$actionContainer.find('.grid-row-save').one('click', function(){\n\t\tvar rowData = [];\n\t\tfor(var columnId in self.adapters){\n\t\t\tif(typeof self.adapters[columnId].getEditedValue != 'undefined'){\n\t\t\t\tvar cell = self.getCell(rowId, columnId);\n\t\t\t\trowData[columnId] = self.adapters[columnId].getEditedValue(self, cell, rowId, columnId);\n\t\t\t}else{\n\t\t\t\trowData[columnId] = self.data[rowId];\n\t\t\t}\n\t\t}\n\t\t$actionContainer.remove();\n\t\tif(self.options.callback.saveEditedRow != null){\n\t    \tself.options.callback.saveEditedRow(rowId, rowData);\n\t    }\n\t});\n\n\t//bind the cancel action\n\t$actionContainer.find('.grid-row-cancel').one('click', function(){\n\t\tvar dataToRefresh = [];\n\t\tdataToRefresh[rowId] = self.getRowData(rowId);\n\t\tself.refresh(dataToRefresh);\n\t\t$actionContainer.remove();\n\t});\n};\n\n/**\n * Add new row to the grid, and let the user edit it\n */\nTaoGridClass.prototype.newRow = function(data)\n{\n\tvar self = this;\n\tvar defaultRowData = {\n\t\t'code':'', value:[]\n\t};\n\tvar rowId = TaoGridClass.__NEW_ROW__;\n\tvar actionsHtml = '<div class=\"grid-row-actions\"> \\\n\t\t<a href=\"#\" class=\"grid-row-action grid-row-save\"><img src=\"'+root_url+'tao/views/img/save.png\"/> Save</a> \\\n\t\t<a href=\"#\" class=\"grid-row-action grid-row-cancel\"><img src=\"'+root_url+'tao/views/img/revert.png\"/> Cancel</a> \\\n\t</div>';\n\tvar row = null;\n\n\t//add new row with default row values\n\tjQuery(this.selector).jqGrid('addRowData', rowId, defaultRowData);\n\trow = this.getRow(rowId);\n\t//add actions\n\tvar $actionContainer = $(actionsHtml).insertAfter($(row));\n\t//apply the edit formatter of each cells\n\tfor(var columnId in this.adapters){\n\t\tif(typeof this.adapters[columnId].editFormatter != 'undefined'){\n\t\t\tvar cell = this.getCell(rowId, columnId);\n\t\t\tthis.adapters[columnId].editFormatter(this, cell, rowId, columnId);\n\t\t}\n\t}\n\n\t//bind new row actions\n\t//bind the save action\n\t$actionContainer.find('.grid-row-save').click(function(){\n\t\tvar rowData = [];\n\t\tfor(var columnId in self.adapters){\n\t\t\tif(typeof self.adapters[columnId].getEditedValue != 'undefined'){\n\t\t\t\tvar cell = self.getCell(rowId, columnId);\n\t\t\t\trowData[columnId] = self.adapters[columnId].getEditedValue(self, cell, rowId, columnId);\n\t\t\t}else{\n\t\t\t\trowData[columnId] = self.data[rowId];\n\t\t\t}\n\t\t}\n\t\t$actionContainer.remove();\n\t\tif(self.options.callback.saveNewRow != null){\n\t    \tself.options.callback.saveNewRow(rowId, rowData);\n\t    }\n\t});\n\n\t//bind the cancel action\n\t$actionContainer.find('.grid-row-cancel').click(function(){\n\t\tjQuery(self.selector).jqGrid('delRowData', rowId);\n\t\t$actionContainer.remove();\n\t});\n};\n\n/**\n * Add data to the grid\n * @param {Array} data\n */\nTaoGridClass.prototype.add = function(data)\n{\n\tvar self = this;\n\tvar crtLine = 0;\n\t//this.data = this.data.concat(data); // does not work with associative array\n\tfor(var i in data){\n\t\tthis.data[i] = data[i];\n\t}\n\n\tfor(var rowId in data){\n\t\t//Pre rendering adapt data\n\t\tfor(var columnId in this.adapters){\n\t\t\tif(typeof this.adapters[columnId].preFormatter != 'undefined'){\n\t\t\t\tthis.data[rowId][columnId] = this.adapters[columnId].preFormatter(this, this.data[rowId], rowId, columnId);\n\t\t\t}\n\t\t}\n\t\t//Pre rendering adapt data functions of predefined macros\n/*\t\tfor(var modelId in this.model){\n\t\t\tvar columnId = this.model[modelId]['id'];\n//\t\t\tconsole.log('my column Id '+columnId);\n\t\t\tif(typeof this.model[columnId] == 'undefined'){\n//\t\t\t\tconsole.log('undefined '+columnId);\n//\t\t\t\tconsole.log(this.model);\n\t\t\t}\n\t\t\tif(typeof this.model[modelId].preFormatter != 'undefined' && this.model[modelId].preFormatter){\n\t\t\t\tswitch(this.model[modelId].preFormatter){\n\t\t\t\t\tcase 'empty':\n//\t\t\t\t\t\tconsole.log('empty');\n\t\t\t\t\t\tthis.data[rowId][columnId] = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'rowId':\n//\t\t\t\t\t\tconsole.log('ROWWWW ID '+rowId);\n\t\t\t\t\t\tthis.data[rowId][columnId] = rowId;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}*/\n\t\t//Render data\n\t\tjQuery(this.selector).jqGrid('addRowData', rowId, this.data[rowId]);\n\t\t//Post rendering adapt content\n\t\tfor(var columnId in this.adapters){\n\t\t\tif(typeof this.adapters[columnId].postCellFormat != 'undefined'){\n\t\t\t\tvar cell = this.getCell(rowId, columnId);\n\t\t\t\tthis.adapters[columnId].postCellFormat(this, cell, rowId, columnId);\n\t\t\t}\n\t\t}\n\t\tcrtLine ++;\n\n\t\t//bind actions\n\t\tvar row = this.getRow(rowId);\n\t\t$(row).find('> td').dblclick(function(){\n\t\t\tvar cellIdentifier = self.getCellIdentifier(this);\n\t\t\tself.editRow(cellIdentifier.rowId);\n\t\t});\n\t}\n\treturn crtLine;\n};\n\n/**\n * Get row\n * @param {String} rowId\n */\nTaoGridClass.prototype.getRow = function(rowId)\n{\n\tvar returnValue = null;\n\tvar $row = $(this.selector).find('tr[id=\"'+rowId+'\"]');\n\tif($row.length > 0){\n\t\treturnValue = $row.get(0);\n\t}\n\treturn returnValue;\n};\n\n/**\n * Get cell\n * @param {String} rowId\n * @param {String} columnId\n */\nTaoGridClass.prototype.getCell = function(rowId, columnId)\n{\n\tvar returnValue = null;\n\t$cell = $(this.selector).find('tr[id=\"'+rowId+'\"]').find('td[aria-describedby=\"'+this.selector.slice(1)+'_'+columnId+'\"]');\n\tif($cell.length > 0){\n\t\treturnValue = $cell.get(0);\n\t}\n\treturn returnValue;\n};\n\n/**\n * Get row data\n * @param {String} rowId\n */\nTaoGridClass.prototype.getRowData = function(rowId)\n{\n\tif(typeof this.data[rowId] != 'undefined'){\n\t\treturn this.data[rowId];\n\t}\n};\n\n/**\n * Get row data\n * @param {String} rowId\n * @param {String} columnId\n */\nTaoGridClass.prototype.getCellData = function(rowId, columnId)\n{\n\tvar returnValue = null;\n\tvar rowData = this.getRowData(rowId);\n\tif(rowData){\n\t\tif(typeof rowData[columnId] != 'undefined'){\n\t\t\treturnValue = rowData[columnId];\n\t\t}\n\t}\n\treturn returnValue;\n};\n\n/**\n * Get position of a cell\n * {columnId} & {rowId}\n * @param {HtmlElement} cell\n */\nTaoGridClass.prototype.getCellIdentifier = function(cell)\n{\n\tvar returnValue = {rowId:null, columnId:null};\n\tvar columnTmp = $(cell).attr('aria-describedby');\n\tif(columnTmp){\n\t\tcolumnTmp = columnTmp.substr(this.selector.length);\n\t\treturnValue.columnId = columnTmp;\n\t}\n\tvar $row = $(cell).parent('tr');\n\tvar rowTmp = $row.attr('id');\n\tif(rowTmp){\n\t\treturnValue.rowId = rowTmp;\n\t}\n\treturn returnValue;\n};\n\n/**\n * TaoGridClass default options\n */\nTaoGridClass.defaultOptions = {\n\theight: null,\n\twidth: null,\n\ttitle: 'GRID',\n\tcallback: {\n\t\tonSelectRow: null\n\t}\n};\ndefine(\"grid/tao.grid\", function(){});\n\n","define('generisHard/controller/routes',[],function(){\n    return {\n        'Optimize' : {\n            'actions' : {\n                'index' : 'controller/settings/optimizer'\n            }\n        },\n    };\n});\n\n","\ndefine('generisHard/Switcher',['jquery', 'context', 'i18n'], function($, context, __){\n    'use strict';\n\n    //create a grid, and update it after each hardification:\n    function Switcher(tableElementId, userOptions){\n\n            this.options = {\n                    onStart: function(){},\n                    onStartDecompile: function(){},\n                    onStartEmpty: function(){},\n                    beforeComplete: function(){},\n                    onComplete: function(){},\n                    onCompleteDecompile: function(){}\n            };\n\n            if (userOptions){\n                    this.options = $.extend(this.options, userOptions);\n            }\n\n            this.$grid = $('#'+tableElementId);\n            this.theData = [];\n            this.currentIndex = -1;\n            this.forcedStart = false;\n            this.decompile = false;\n\n            Switcher.instances[tableElementId] = this;\n    }\n\n    Switcher.instances = [];\n\n    Switcher.prototype.getActionUrl = function(action){\n            var url = context.root_url;\n            url += 'generisHard/Optimize/' + action;\n\n            return url;\n    };\n\n    Switcher.prototype.init = function(){\n\n            var __this = this;\n            var actionUrl = __this.getActionUrl('optimizeClasses');\n\n            $.ajax({\n                    type: \"POST\",\n                    url: actionUrl,\n                    data: {},\n                    dataType: 'json',\n                    success: function(r){\n                            if (r.length == 0){\n                                    if(__this.options.onStartEmpty) __this.options.onStartEmpty(__this);\n                                    return false;\n                            }\n\n                            var gridOptions = {\n                                            datatype: \"local\", \n                                            hidegrid : false,\n                                            colNames: [ __('Classes'), __('Status'), __('Instances')], \n                                            colModel: [ \n                                                       {name: 'class', index: 'class', sortable: false},\n                                                       {name: 'status', index: 'status', align: 'center', sortable: false},\n                                                       {name: 'count', index: 'count', align: 'center', sortable: false}\n                                                       ], \n                                                       height: 'auto', \n                                                       autowidth: true,\n                                                       width:(parseInt(__this.$grid.width()) - 2),\n                                                       sortname: 'status', \n                                                       sortorder: \"asc\", \n                                                       caption: __(\"Available Classes\"),\n\n                            };\n\n                            //build jqGrid:\n                            require(['require', 'jquery', 'grid/tao.grid'], function(req, $) {\n                                    __this.$grid.jqGrid(gridOptions);\n\n                                    //insert rows:\n                                    var i = 0;\n                                    for (var uri in r){\n                                            var row = r[uri];\n                                            var rClass = row['class'];\n                                            var rClassUri = row['classUri'];\n                                            var rStatus = (row['status'] === 'compiled') ? __('Production') : __('Design') ;\n                                            var rCount = row['count'];\n                                            var rStatusTag = row['status'];\n                                            __this.setRowData(i, {'class': rClass, 'status': rStatus, 'count': rCount, 'classUri': rClassUri, 'statusTag': rStatusTag});\n                                            i++;\n                                    }\n                            });\n\n                    }\n            });\n\n            return true;\n    };\n\n    Switcher.prototype.startCompilation = function(){\n                    this.decompile = false;\n                    this.currentIndex = 0;\n\n            for (var j = 0; j < this.theData.length; j++){\n                            if (this.currentIndex < 0 && this.theData[j].statusTag !== 'compiled'){\n                                            this.currentIndex = j;\n                            }\n                    }\n\n                    if (this.options.onStart){\n                        this.options.onStart(this);\n                    }\n\n            this.nextStep();\n    };\n\n    Switcher.prototype.startDecompilation = function(){\n                    this.currentIndex = 0;\n                    this.decompile = true;\n\n            if (this.options.onStartDecompile){\n                    this.options.onStartDecompile(this);\n            }\n\n            for (var j = 0; j < this.theData.length; j++){\n                            if (this.currentIndex < 0 && this.theData[j].statusTag !== 'decompiled'){\n                                            this.currentIndex = j;\n                            }\n                    }\n\n            this.nextStep();\n    };\n\n    Switcher.prototype.setRowData = function(rowId, data){\n\n            if (typeof(this.theData[rowId]) !== 'undefined'){\n                    this.$grid.jqGrid('setRowData', rowId, data);\n            }\n            else{\n                    this.$grid.jqGrid('addRowData', rowId, data);\n            }\n\n            this.theData[rowId] = data;\n    };\n\n    Switcher.prototype.setCellData = function(rowId, colName, data){\n            this.$grid.jqGrid('setCell', rowId, colName, data);\n            this.theData[rowId][colName] = data;\n    };\n\n    Switcher.prototype.addResultData = function(rowId, data){\n            this.theData[rowId].compilationResults = null;\n            this.theData[rowId].compilationResults = data;\n    };\n\n    Switcher.prototype.getRowIdByUri = function(classUri){\n            var returnValue = -1;\n\n            for (var rowId in this.theData){\n\n                    if (this.theData[rowId].classUri === classUri){\n                            returnValue = rowId;\n                            break;\n                    }\n            }\n\n            return returnValue;\n    };\n\n    Switcher.prototype.nextStep = function(){\n            if (this.currentIndex < this.theData.length){\n                    if (this.decompile === true && this.theData[this.currentIndex].statusTag !== 'decompiled'){\n                            this.decompileClass(this.theData[this.currentIndex].classUri);\n                    }\n                    else if (this.decompile === false && this.theData[this.currentIndex].statusTag !== 'compiled'){\n                            this.compileClass(this.theData[this.currentIndex].classUri);   \n                    }\n            }\n            else{\n                    this.end();\n            }\n    };\n\n    Switcher.prototype.compileClass = function(classUri){\n            var __this = this;\n            var rowId = this.getRowIdByUri(classUri);\n\n            this.setCellData(rowId, 'status', __('Switching to Production...'));\n\n            $.ajax({\n                    type: \"POST\",\n                    url: __this.getActionUrl('compileClass'),\n                    data: {classUri : classUri, options: ''},\n                    dataType: \"json\",\n                    success: function(r){\n                            __this.addResultData(rowId, r);\n\n                            if (r.success){\n                                   //update grid\n                                    var selfCount = r.count;\n                                    var relatedCount = 0;\n                                    for(var relatedClassName in r.relatedClasses){\n                                            relatedCount += parseInt(r.relatedClasses[relatedClassName]);\n                                    }\n                                    var count = ' (' + (selfCount + relatedCount) + ' ' + __('instances') + ')';\n                                    __this.setCellData(rowId, 'status', __('Production') + count);\n                                    __this.setCellData(rowId, 'statusTag', 'compiled');\n\n                            }\n                            else{\n                                    __this.setCellData(rowId, 'status', __('Failed'));\n                            }\n\n                            __this.currentIndex ++;\n                            __this.nextStep();\n                    }\n            });\n    };\n\n    Switcher.prototype.decompileClass = function(classUri){\n            var __this = this;\n            var rowId = this.getRowIdByUri(classUri);\n\n            this.setCellData(rowId, 'status', __('Switching to Design...'));\n\n            $.ajax({\n                    type: \"POST\",\n                    url: __this.getActionUrl('decompileClass'),\n                    data: {classUri : classUri, options: ''},\n                    dataType: \"json\",\n                    success: function(r){\n                    __this.addResultData(rowId, r);\n\n                    if (r.success){\n                            //update grid\n                            var selfCount = r.count;\n                            var relatedCount = 0;\n                            for(var relatedClassName in r.relatedClasses){\n                                    relatedCount += parseInt(r.relatedClasses[relatedClassName]);\n                            }\n                            var count = ' (' + (selfCount + relatedCount) + ' ' + __('instances') + ')';\n                            __this.setCellData(rowId, 'status', __('Design') + count);\n                            __this.setCellData(rowId, 'statusTag', 'decompiled');\n                    }\n                    else{\n                            __this.setCellData(rowId, 'status', __('Failed'));\n                    }\n\n                    __this.currentIndex ++;\n                    __this.nextStep();\n                }\n            });\n    };\n\n    Switcher.prototype.end = function(){\n\n            var __this = this;\n            if (this.options.beforeComplete){\n                    this.options.beforeComplete(this);\n            }\n\n            if (__this.decompile){\n                    if (__this.options.onCompleteDecompile){\n                            __this.options.onCompleteDecompile(this);\n                    }\n            }\n            else{\n                  //send the ending request: index the properties:\n                    $.ajax({\n                            type: \"POST\",\n                            url: __this.getActionUrl('createPropertyIndex'),\n                            data: {},\n                            dataType: \"json\",\n                            success: function (r){\n                                    if(__this.options.onComplete){\n                                            __this.options.onComplete(this, r.success);\n                                    }\n                            }\n                    });  \n            }        \n    };\n    \n    return Switcher;\n});\n","define('generisHard/controller/settings/optimizer',['jquery', 'i18n', 'generisHard/Switcher'], function($, __, Switcher){\n    return {\n        start: function(){\n            var $compilationGrid =  $('#compilation-grid-container');\n            var $compilationResutlts = $('#compilation-grid-results');\n            var $compileButton = $('#compileButton');\n            var $decompileButton = $('#decompileButton');\n            \n            var options = {\n                    onStart:function(){\n                        $compilationGrid.show();\n                    },\n                    onStartEmpty:function(){\n                        $compilationResutlts.html(__('There are no classes available for optimization.')).show();\n                    },\n                    onStartDecompile:function(){\n                        $compilationGrid.show();\n                    },\n                    beforeComplete: function(){\n                        $compilationResutlts.html(__('Rebuilding indexes, it may take a while.')).show();\n                    },\n                    onComplete:function(aSwitcher, success){\n                            if(success){\n                                $compilationResutlts.html(__('Switch to Production Mode completed.')).show();\n                            } else{\n                                $compilationResutlts.html(__('Cannot successfully build the optimized table indexes')).show();\n                            }\n                    },\n                    onCompleteDecompile:function(){\n                        $compilationResutlts.html(__('Switch to Design Mode completed')).show();\n                        $compileButton.show();\n                        $decompileButton.show();\n                    }\n            };\n\n            var mySwitcher = new Switcher('compilation-grid', options);\n            mySwitcher.init();\n\n            $compileButton.click(function(){\n                if(confirm(__('All classes in Design Mode will switch to Production Mode. Please confirm.'))){\n                    mySwitcher.startCompilation();\n                }\n            });\n\n            $decompileButton.click(function(){\n                if(confirm(__('All classes in Production Mode will switch to Design Mode. Please confirm.'))){\n                    mySwitcher.startDecompilation();\n                    $compilationResutlts.hide();\n                }\n            });\n        }\n    };\n});\n\n\n\n"]}